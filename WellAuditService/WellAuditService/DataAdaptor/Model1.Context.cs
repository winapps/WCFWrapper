//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAdaptor
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class EHSAuditEntities : DbContext
    {
        public EHSAuditEntities()
            : base("name=EHSAuditEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<ApplicationUser> ApplicationUsers { get; set; }
        public DbSet<Audit> Audits { get; set; }
        public DbSet<EquipmentList> EquipmentLists { get; set; }
        public DbSet<Finding> Findings { get; set; }
        public DbSet<Observation> Observations { get; set; }
        public DbSet<Operator> Operators { get; set; }
        public DbSet<SiteSetting> SiteSettings { get; set; }
        public DbSet<Well> Wells { get; set; }
        public DbSet<WellName> WellNames { get; set; }
        public DbSet<WellType> WellTypes { get; set; }
        public DbSet<AuditWellSite> AuditWellSites { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<AuditWellSiteEquipment> AuditWellSiteEquipments { get; set; }
        public DbSet<ObservationPhoto> ObservationPhotoes { get; set; }
    
        public virtual int InsWellname(Nullable<int> wellNameID, string wellName, string wellNameDesc, Nullable<int> idUser)
        {
            var wellNameIDParameter = wellNameID.HasValue ?
                new ObjectParameter("WellNameID", wellNameID) :
                new ObjectParameter("WellNameID", typeof(int));
    
            var wellNameParameter = wellName != null ?
                new ObjectParameter("WellName", wellName) :
                new ObjectParameter("WellName", typeof(string));
    
            var wellNameDescParameter = wellNameDesc != null ?
                new ObjectParameter("WellNameDesc", wellNameDesc) :
                new ObjectParameter("WellNameDesc", typeof(string));
    
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("idUser", idUser) :
                new ObjectParameter("idUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsWellname", wellNameIDParameter, wellNameParameter, wellNameDescParameter, idUserParameter);
        }
    
        public virtual int USP_InsEquipmentList(string equipmentName, string equipementDesc)
        {
            var equipmentNameParameter = equipmentName != null ?
                new ObjectParameter("EquipmentName", equipmentName) :
                new ObjectParameter("EquipmentName", typeof(string));
    
            var equipementDescParameter = equipementDesc != null ?
                new ObjectParameter("EquipementDesc", equipementDesc) :
                new ObjectParameter("EquipementDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InsEquipmentList", equipmentNameParameter, equipementDescParameter);
        }
    
        public virtual int USP_InsWell(string wellName, string wellTypeCode, string wellSerialID, string wellMbr, string sectionTownshipRange, string latitude, string longitude, string state, string country, string wellDescription, Nullable<int> idUser)
        {
            var wellNameParameter = wellName != null ?
                new ObjectParameter("WellName", wellName) :
                new ObjectParameter("WellName", typeof(string));
    
            var wellTypeCodeParameter = wellTypeCode != null ?
                new ObjectParameter("WellTypeCode", wellTypeCode) :
                new ObjectParameter("WellTypeCode", typeof(string));
    
            var wellSerialIDParameter = wellSerialID != null ?
                new ObjectParameter("WellSerialID", wellSerialID) :
                new ObjectParameter("WellSerialID", typeof(string));
    
            var wellMbrParameter = wellMbr != null ?
                new ObjectParameter("WellMbr", wellMbr) :
                new ObjectParameter("WellMbr", typeof(string));
    
            var sectionTownshipRangeParameter = sectionTownshipRange != null ?
                new ObjectParameter("SectionTownshipRange", sectionTownshipRange) :
                new ObjectParameter("SectionTownshipRange", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var wellDescriptionParameter = wellDescription != null ?
                new ObjectParameter("WellDescription", wellDescription) :
                new ObjectParameter("WellDescription", typeof(string));
    
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("idUser", idUser) :
                new ObjectParameter("idUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InsWell", wellNameParameter, wellTypeCodeParameter, wellSerialIDParameter, wellMbrParameter, sectionTownshipRangeParameter, latitudeParameter, longitudeParameter, stateParameter, countryParameter, wellDescriptionParameter, idUserParameter);
        }
    
        public virtual int USP_InsWellName(string wellName, Nullable<int> idUser)
        {
            var wellNameParameter = wellName != null ?
                new ObjectParameter("WellName", wellName) :
                new ObjectParameter("WellName", typeof(string));
    
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("idUser", idUser) :
                new ObjectParameter("idUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InsWellName", wellNameParameter, idUserParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int USP_InsOperator(Nullable<int> operatorIdNbr, string operatorName)
        {
            var operatorIdNbrParameter = operatorIdNbr.HasValue ?
                new ObjectParameter("OperatorIdNbr", operatorIdNbr) :
                new ObjectParameter("OperatorIdNbr", typeof(int));
    
            var operatorNameParameter = operatorName != null ?
                new ObjectParameter("OperatorName", operatorName) :
                new ObjectParameter("OperatorName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InsOperator", operatorIdNbrParameter, operatorNameParameter);
        }
    
        public virtual int USP_InsWellname1(string wellName, string wellNameDesc)
        {
            var wellNameParameter = wellName != null ?
                new ObjectParameter("WellName", wellName) :
                new ObjectParameter("WellName", typeof(string));
    
            var wellNameDescParameter = wellNameDesc != null ?
                new ObjectParameter("WellNameDesc", wellNameDesc) :
                new ObjectParameter("WellNameDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InsWellname1", wellNameParameter, wellNameDescParameter);
        }
    
        public virtual int SP_InsObservations(Nullable<int> auditSiteWellEquipmentID, string observationDesc, string photoLink, string photoLabel, Nullable<int> wellID, Nullable<int> operatorID, Nullable<int> siteSettingID, Nullable<int> auditId, string wellStatus, Nullable<System.DateTime> siteVisitedDate, Nullable<bool> isWellPluggedandAbandoned, string generalNotes, Nullable<int> auditSiteWellID, Nullable<int> equipmentListID)
        {
            var auditSiteWellEquipmentIDParameter = auditSiteWellEquipmentID.HasValue ?
                new ObjectParameter("AuditSiteWellEquipmentID", auditSiteWellEquipmentID) :
                new ObjectParameter("AuditSiteWellEquipmentID", typeof(int));
    
            var observationDescParameter = observationDesc != null ?
                new ObjectParameter("ObservationDesc", observationDesc) :
                new ObjectParameter("ObservationDesc", typeof(string));
    
            var photoLinkParameter = photoLink != null ?
                new ObjectParameter("PhotoLink", photoLink) :
                new ObjectParameter("PhotoLink", typeof(string));
    
            var photoLabelParameter = photoLabel != null ?
                new ObjectParameter("PhotoLabel", photoLabel) :
                new ObjectParameter("PhotoLabel", typeof(string));
    
            var wellIDParameter = wellID.HasValue ?
                new ObjectParameter("WellID", wellID) :
                new ObjectParameter("WellID", typeof(int));
    
            var operatorIDParameter = operatorID.HasValue ?
                new ObjectParameter("OperatorID", operatorID) :
                new ObjectParameter("OperatorID", typeof(int));
    
            var siteSettingIDParameter = siteSettingID.HasValue ?
                new ObjectParameter("SiteSettingID", siteSettingID) :
                new ObjectParameter("SiteSettingID", typeof(int));
    
            var auditIdParameter = auditId.HasValue ?
                new ObjectParameter("AuditId", auditId) :
                new ObjectParameter("AuditId", typeof(int));
    
            var wellStatusParameter = wellStatus != null ?
                new ObjectParameter("WellStatus", wellStatus) :
                new ObjectParameter("WellStatus", typeof(string));
    
            var siteVisitedDateParameter = siteVisitedDate.HasValue ?
                new ObjectParameter("SiteVisitedDate", siteVisitedDate) :
                new ObjectParameter("SiteVisitedDate", typeof(System.DateTime));
    
            var isWellPluggedandAbandonedParameter = isWellPluggedandAbandoned.HasValue ?
                new ObjectParameter("IsWellPluggedandAbandoned", isWellPluggedandAbandoned) :
                new ObjectParameter("IsWellPluggedandAbandoned", typeof(bool));
    
            var generalNotesParameter = generalNotes != null ?
                new ObjectParameter("GeneralNotes", generalNotes) :
                new ObjectParameter("GeneralNotes", typeof(string));
    
            var auditSiteWellIDParameter = auditSiteWellID.HasValue ?
                new ObjectParameter("AuditSiteWellID", auditSiteWellID) :
                new ObjectParameter("AuditSiteWellID", typeof(int));
    
            var equipmentListIDParameter = equipmentListID.HasValue ?
                new ObjectParameter("EquipmentListID", equipmentListID) :
                new ObjectParameter("EquipmentListID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsObservations", auditSiteWellEquipmentIDParameter, observationDescParameter, photoLinkParameter, photoLabelParameter, wellIDParameter, operatorIDParameter, siteSettingIDParameter, auditIdParameter, wellStatusParameter, siteVisitedDateParameter, isWellPluggedandAbandonedParameter, generalNotesParameter, auditSiteWellIDParameter, equipmentListIDParameter);
        }
    }
}
